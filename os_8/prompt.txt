File: 1_shared_memory_reader.c
/*
Poziv programa:
./shared_memory_reader pathToFile

Program prvo ucitava objekat deljene memorije na putanji 'pathToFIle'
a potom ispisuje niz brojeva iz tog objekta.
*/

#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>
#include <fcntl.h>

#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <stdbool.h>

#include <sys/mman.h>

#define osErrorFatal(userMsg) osErrorFatalImpl((userMsg), __FILE__, __func__, __LINE__)
#define osAssert(expr, userMsg) \
	do {\
		if (!(expr)) \
			osErrorFatal(userMsg); \
	} while (0)
	
void osErrorFatalImpl(const char* userMsg, const char* fileName, const char* functionName, const int lineNumber);

static char* osUsage = "./shared memory reader filePath";

void *osGetMemoryBlock(const char* filePath, unsigned* size);

int main(int argc, char** argv) {
	
	osAssert(argc == 2, osUsage);
	
	/* ucitavamo parce deljene memorije
	 * BITNO:
	 * ovde samo ucitavamo sadrzaj objekta deljene memorije,
	 * ne kreiramo ga. Kreiranje radi samo jedan proces
	 */ 
	unsigned size = 0;
	int *niz = osGetMemoryBlock(argv[1], &size);
	int brojEl = size/sizeof(int);
	
	/* citamo sadrzaj niza iz mapiranog bloka */
	int i = 0;
	for (i = 0; i < brojEl; i++)
		printf("%d ", niz[i]);
		
	printf("\n");
	
	/* izmene memorijsko bloka se trajno snimaju na disku, tj.
	 * u fajlu koji predstavlja deljenu memoriju 
	 */
	osAssert(munmap(niz, size) != -1, "munmap failed");
	/* brisemo objekat deljene memorije, jer nam vise ne treba 
	 * unlink radi poslednji proces koji koristi objekat deljene memorije
	 */ 
	osAssert(shm_unlink(argv[1]) != -1, "shm_unlink failed");
	
	exit(EXIT_SUCCESS);
}

void *osGetMemoryBlock(const char* filePath, unsigned* size) {
	
	/* otvara se fajl koji predstavlja deljenu memoriju */
	int memFd = shm_open(filePath, O_RDONLY, 0);
	osAssert(memFd != -1, "shm_open failed");
	
	/* uz pomoc fstata se dobija velicina fajla
	 * 
	 * BITNO:
	 * nikada ne koristiti obican stat, vec uvek fstat
	 * 
	 * JOS BITNIJE:
	 * samo jedan proces radi ftruncate i podesava velicinu fajla. SVI
	 * ostali pomocu fstat otkrivaju tu velicinu
	 */ 
	struct stat fInfo;
	osAssert(fstat(memFd, &fInfo) != -1, "fstat failed");
	*size = fInfo.st_size;
	
	void* addr;
	
	/* mapiranje objekta deljene memorije u RAM memoriju
	 * BITNO:
	 * prava pristupa memorijski mapiranom delu moraju da budu jednaka
	 * modu u kome je fajl deljene memorije otvoren
	 */ 
	osAssert((addr = mmap(0, *size, PROT_READ, MAP_SHARED, memFd, 0)) != MAP_FAILED, "mmap failed");
	
	close(memFd);
	
	return addr;
}

void osErrorFatalImpl(const char* userMsg, const char* fileName, const char* functionName, const int lineNumber) {
	
	perror(userMsg);
	
	fprintf(stderr, "File name: %s\nFunction name: %s\nLine number: %d\n", fileName, functionName, lineNumber);
	
	exit(EXIT_FAILURE);
}


File: 1_shared_memory_writer.c
/*
Poziv programa:
./shared_memory_writer pathToFile num0 num1 num2 ...

Program prvo kreira objekat deljene memorije na putanji 'pathToFIle'
a potom u nju upisuje niz brojeva num0 num1 num2...
*/
#define _XOPEN_SOURCE 700
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>
#include <fcntl.h>

#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <stdbool.h>

#include <sys/mman.h>

#define osErrorFatal(userMsg) osErrorFatalImpl((userMsg), __FILE__, __func__, __LINE__)
#define osAssert(expr, userMsg) \
	do {\
		if (!(expr)) \
			osErrorFatal(userMsg); \
	} while (0)
	
void osErrorFatalImpl(const char* userMsg, const char* fileName, const char* functionName, const int lineNumber);

static char* osUsage = "./shared_memory_writer pathToFile num0 num1 num2 ...";

void* osCreateMemoryBlock(const char* filePath, unsigned size);

int main(int argc, char** argv) {
	
	osAssert(argc >= 3, osUsage);
	
	/* kreira se blok deljene memorije dovoljne velicine za smestanje niza */
	int n = argc - 2;
	int size = (argc-2)*sizeof(int);
	int *niz = osCreateMemoryBlock(argv[1], size);
	
	/* niz brojeva se smesta u deljenu memoriju */
	int i;
	for (i = 0; i<n; i++)
		niz[i] = atoi(argv[i+2]);
		
	/* izmene memorijsko bloka se trajno snimaju na disku, tj.
	 * u fajlu koji predstavlja deljenu memoriju 
	 */
	osAssert(munmap(niz, size) != -1, "unmap failed");
	
	exit(EXIT_SUCCESS);
}

void* osCreateMemoryBlock(const char* filePath, unsigned size) {
	
	/* kreira se blok deljene memorije
	 * 
	 * BITNO 1:
	 * kreiranje objekta deljene memorije radi samo jedan proces
	 * ostali procesi samo otvaraju objekat u odgovarajucem modu
	 * 
	 * BITNO 2: 
	 * mod u kome je otvoren fajl deljene memorije
	 * mora biti jednak modu u kome se mapira memorija
	 */ 
	int memFd = shm_open(filePath, O_RDWR | O_CREAT, 0600);
	osAssert(memFd != -1, "shm_open failed");
	
	/* velicina fajla se postavlja na zeljenu 
	 * 
	 * BITNO:
	 * ovu operaciju radi samo onaj proces koji kreira objekat
	 * deljene memorije
	 */ 
	osAssert(ftruncate(memFd, size) != -1, "ftruncate failed");
	
	void* addr;
	
	/* mapiranje objekta deljene memorije u RAM memoriju
	 * BITNO:
	 * prava pristupa memorijski mapiranom delu moraju da budu jednaka
	 * modu u kome je fajl deljene memorije otvoren
	 */ 
	osAssert((addr = mmap(0, size, PROT_READ | PROT_WRITE, \
			MAP_SHARED, memFd, 0)) != MAP_FAILED, "mmap failed");
	
	/* zatvara se fajl deljene memorije, jer je njegov sadrzaj u memoriji
	 * i sam fajl na vise nije potreban
	 */ 	
	close(memFd);
	
	/* vracamo adresu memorijski mapiranog bloka */
	return addr;
}

void osErrorFatalImpl(const char* userMsg, const char* fileName, const char* functionName, const int lineNumber) {
	
	perror(userMsg);
	
	fprintf(stderr, "File name: %s\nFunction name: %s\nLine number: %d\n", fileName, functionName, lineNumber);
	
	exit(EXIT_FAILURE);
}


File: 2_log_client.c
/*
Poziv programa:
./log_client pathFile

Program ucitava objekat deljene memorije na putanji 'pathFile'
a potom u petlji ucitava poruke iz tog objekta i ispisuje ih
na svoj standardni izlaz. Kada se unese poruka "quit", 
program treba da zavrsi sa radom.
Posto vise procesa moze istovremeno citati/pisati iz tog objekta
deljene memorije, potrebno je sinhronizovati citanje i pisanje 
pomocu semafora. 
*/

#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>
#include <fcntl.h>

#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <stdbool.h>

#include <sys/mman.h>
#include <semaphore.h>
#include <string.h>
#include <strings.h>

#define check_error(cond,msg)\
  do {\
    if (!(cond)) {\
      perror(msg);\
      fprintf(stderr, "File: %s\nFunction: %s\nLine: %d\n", __FILE__, __func__, __LINE__);\
      exit(EXIT_FAILURE);\
    }\
  } while (0)

#define MSG_LEN (256)
#define LOCAL_SEM (0)
#define PROC_SEM (!(LOCAL_SEM))

typedef struct {
	char buf[MSG_LEN];
	sem_t safeToRead;
	sem_t safeToWrite;
} osMemoryBlock;	

static char* osUsage = "./log_client pathFile";


void* osGetMemoryBlock(const char* filePath, unsigned* size) {
	
	int memFd = shm_open(filePath, O_RDWR, 0);
	check_error(memFd != -1, "shm open failed");
	
	struct stat fInfo;
	check_error(fstat(memFd, &fInfo) != -1, "stat failed");
	*size = fInfo.st_size;
	
	void *addr;
	check_error((addr = mmap(0, *size, PROT_READ | PROT_WRITE, MAP_SHARED, memFd, 0)) != MAP_FAILED, "mmap failed");
	
	close(memFd);
	
	return addr;
}

int main(int argc, char** argv) {
	
	check_error(argc == 2, osUsage);
	
	/* cita se objekat deljeme memorije */
	unsigned size;
	osMemoryBlock *pMsgBuf = osGetMemoryBlock(argv[1], &size);
	
	/* lokalni bafer */
	char localBuf[MSG_LEN];
	do {
		
		/* cekamo na semaforu koji stiti operaciju citanja
		 * i na taj nacin sinhronisemo pristup baferu za razmenu
		 * poruka u deljenoj memoriji
		 * 
		 * IZUZETNO VAZNO:
		 * sinhronisu se SAMO i ISKLJUCIVO deljeni resursi i promenljive. 
		 * 
		 * sve promenljive koje nisu deljene se NIKADA ne sinhronisu i njihovo
		 * pojavljivanje u kriticnoj sekciji je ozbiljna greska, jer 
		 * znacajno umanjuje ili u potpunosti ponistava ubrzanje koje se
		 * dobija paralelizacijom
		 */
		check_error(sem_wait(&pMsgBuf->safeToRead) != -1, "sem wait failed");
		
		/* BITNO:
		 * samo pristup, tj. upotreba deljene promenljive se 
		 * sinhronise
		 */
		strcpy(localBuf, pMsgBuf->buf);
		
		/* obavestavamo drugi proces da je bezbedno da upise novu poruku
		 * u deljenu memoriju
		 */
		check_error(sem_post(&pMsgBuf->safeToWrite) != -1, "sem post failed");
		
		/* BITNO:
		 * lokalna operacija se nikada ne sinhronise
		 */ 
		printf("Received message: '%s'\n", localBuf);
		
	} while(strcasecmp(localBuf, "quit"));
	
	/* izmene memorijsko bloka se trajno snimaju na disku, tj.
	 * u fajlu koji predstavlja deljenu memoriju 
	 */
	check_error(munmap(pMsgBuf, size) != -1, "munmap failed");
	
	exit(EXIT_SUCCESS);
}


File: 2_log_server.c
/*
Poziv programa:
./log_server pathFile

Program kreira objekat deljene memorije na putanji 'pathFile'
a potom u petlji ucitava poruke od korisnika sa standardnog ulaza,
koje zatim upisuje u objekat deljene memorije. Kada se unese poruka
"quit", program treba da zavrsi sa radom.
Posto vise procesa moze istovremeno citati/pisati iz tog objekta
deljene memorije, potrebno je sinhronizovati citanje i pisanje 
pomocu semafora. 
*/

#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>
#include <fcntl.h>

#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <stdbool.h>

#include <sys/mman.h>
#include <semaphore.h>

#include <string.h>
#include <strings.h>

#define check_error(cond,msg)\
  do {\
    if (!(cond)) {\
      perror(msg);\
      fprintf(stderr, "File: %s\nFunction: %s\nLine: %d\n", __FILE__, __func__, __LINE__);\
      exit(EXIT_FAILURE);\
    }\
  } while (0)

#define MSG_LEN (256) 			/* maksimalna velicina poruke u bloku memorije */
#define LOCAL_SEM (0)			/* lokalni semafor - koristi se za sync tredova */
#define PROC_SEM (!LOCAL_SEM)	/* globalni semafor - koristi se za sync procesa */

/* struktura koja opisuje sadrzaj fajla deljene memorije
 * 
 * IZUZETNO VAZNO:
 * radosled polja u svim procesima koji koriste ISTI semafor za sync
 * ISTOG resursa MORA biti jednak u svim procesima, inace program nece
 * raditi kako treba
 */
typedef struct {
	char buf[MSG_LEN];
	sem_t safeToRead;
	sem_t safeToWrite;
} osMemoryBlock;

static char* osUsage = "./log_server pathFile";

void *osCreateMemoryBlock(const char* filePath, unsigned size) {
	
	int memFd = shm_open(filePath, O_RDWR | O_CREAT, 0600);
	check_error(memFd != -1, "shm_open failed");
	
	check_error(ftruncate(memFd, size) != -1, "ftruncate failed");
	
	void* addr;
	check_error((addr = mmap(0, size, PROT_READ | PROT_WRITE, MAP_SHARED, memFd, 0)) != MAP_FAILED, "mmap failed");
	
	close(memFd);
	
	return addr;
}

int main(int argc, char** argv) {
	
	check_error(argc == 2, osUsage);
	
	/* kreira se memorijski blok */
	osMemoryBlock* pMsgBuf = osCreateMemoryBlock(argv[1], sizeof(osMemoryBlock));
	
	/* inicijalizacija semafora
	 * 
	 * IZUZETNO VAZNO:
	 * samo JEDAN proces radi inicijalizaciju semafora
	 * svi ostali procesi samo koriste semafore
	 * 
	 * broj kojim se inicijalizuje semafor treba da bude jednak 
	 * ukupnom broju dostupnih resursa. Ako nema dostupnih resursa
	 * semafor se inicijalizuje nulom
	 */ 
	check_error(sem_init(&pMsgBuf->safeToRead, PROC_SEM, 0) != -1, "read sem init failed");
	check_error(sem_init(&pMsgBuf->safeToWrite, PROC_SEM, 1) != -1, "write sem init failed");
	
	/* lokalni bafer za ucitavanje poruka */
	char localBuf[MSG_LEN];
	
	do {
		/* ucitavamo poruku od korisnika */
		scanf("%s", localBuf);
		
		/* cekamo na semaforu koji stiti operaciju pisanja 
		 * i na taj nacin sinhronizujemo pristup baferu za razmenu
		 * poruka u deljenoj memoriji
		 * 
		 * IZUZETNO VAZNO:
		 * sinhronisu se SAMO i ISKLJUCIVO deljeni resursi i promenljive. 
		 * 
		 * sve promenljive koje nisu deljene se NIKADA ne sinhronisu i njihovo
		 * pojavljivanje u kriticnoj sekciji je ozbiljna greska, jer 
		 * znacajno umanjuje ili u potpunosti ponistava ubrzanje koje se
		 * dobija paralelizacijom
		 */
		check_error(sem_wait(&pMsgBuf->safeToWrite)!=-1, "sem wait failed");
		
		/* BITNO:
		 * samo pristup, tj. upotreba deljene promenljive se 
		 * sinhronise
		 */ 
		strcpy(pMsgBuf->buf, localBuf);
		
		/* obavestavamo drugi proces da je postalvjena nova poruka
		 * u deljenoj memoriji
		 */
		check_error(sem_post(&pMsgBuf->safeToRead) != -1, "sem post failed");
		
	} while(strcasecmp(localBuf, "quit"));
	
	/* izmene memorijsko bloka se trajno snimaju na disku, tj.
	 * u fajlu koji predstavlja deljenu memoriju 
	 */
	check_error(munmap(pMsgBuf, sizeof(osMemoryBlock)) != -1, "munmap failed");
	/* brise se objekat deljene memorije 
	 * BITNO:
	 * samo jedan proces ovo radi
	 */
	check_error(shm_unlink(argv[1]) != -1, "shm unlink failed");
	
	exit(EXIT_SUCCESS);
}


File: vezbanje_4.c
#define _XOPEN_SOURCE 700
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <unistd.h>

#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <stdint.h>
#include <errno.h>

#include <sys/mman.h>
#include <semaphore.h>

#define osErrorFatal(userMsg) osErrorFatalImpl((userMsg), __FILE__, __func__, __LINE__)
#define osAssert(expr, userMsg) \
    do { \
        if (!(expr)) \
            osErrorFatal(userMsg); \
    } while(0)

#define MAX_DATA_LEN (1024) 
   
typedef struct {
	
	sem_t ready;
	sem_t sorted;
	double data[MAX_DATA_LEN];
	unsigned numOfElems;
} OsSharedDoubArray;
    
static const char *os_Usage = "./3 shm_name";
    
void osErrorFatalImpl(const char *userMsg, const char *fileName, 
                      const char *functionName, const int lineNum);

void *osGetMemoryBlock(const char *name, int *blockSize);

int main(int argc, char** argv) {
	
	osAssert(argc == 2, os_Usage);
	
	 /**
     * Get integers from shared memory
     * */
    int blockSize = 0;
    OsSharedDoubArray* data = osGetMemoryBlock(argv[1], &blockSize);
    
    osAssert(sem_wait(&data->ready) != -1, "sem wait failed");
    
    int i = 0;
    int j = 0;
    for (i = 0; i < data->numOfElems; i++) {
		
		for (j = 0; j < data->numOfElems; j++) {
		
			if (data->data[i] > data->data[j]) {
				
				double tmp = data->data[i];
				data->data[i] = data->data[j];
				data->data[j] = tmp;
			}
		}
	}
    
    osAssert(sem_post(&data->sorted) != -1, "sem wait failed");
    
    osAssert(-1 != munmap(data, blockSize), "Unmapping memory failed");
	
	exit(EXIT_SUCCESS);
}

void *osGetMemoryBlock(const char *name, int *blockSize) {
    /**
     * Open shared memory object
     * */
    int memFd = shm_open(name, O_RDWR, 0);
    osAssert(-1 != memFd, "Opening shared memory object");
    
    /**
     * Get size of memory block
     * */
    struct stat finfo;
    osAssert(-1 != fstat(memFd, &finfo), "Getting shared memory info failed");
    *blockSize = finfo.st_size;
    
    /**
     * Map memory into process address space
     * */
    void *addr;
    osAssert(MAP_FAILED != (addr = mmap(NULL, *blockSize, PROT_READ | PROT_WRITE, MAP_SHARED, memFd, 0)), "Mapping memory failed");
    close(memFd);
    return addr;
}


void osErrorFatalImpl(const char *userMsg, const char *fileName, 
                      const char *functionName, const int lineNum) {
    perror(userMsg);
    fprintf(stderr, "File: '%s'\nFunction: '%s'\nLine: '%d'\n", fileName, functionName, lineNum);
    exit(EXIT_FAILURE);
}


