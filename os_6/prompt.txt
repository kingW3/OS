File: 1_hello_process.c
/*
Program demonstrira kreiranje novih procesa. Nakon kreiranja,
roditelj treba da ispise svoj PID i PID svog deteta, a dete
svoj PID i PID svog roditelja. Nakon toga, oba procesa ispisuju istu poruku.
*/

#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>
#include <fcntl.h>

#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <stdbool.h>

/* makro za proveru gresaka */
#define check_error(cond,msg)\
  do {\
    if (!(cond)) {\
      perror(msg);\
      fprintf(stderr, "File: %s\nFunction: %s\nLine: %d\n", __FILE__, __func__, __LINE__);\
      exit(EXIT_FAILURE);\
    }\
  } while (0)

int main(int argc, char** argv) {
	
	/* novi proces se kreira pomocu funkcije fork
	 * rezultat forka su dve identicne kopije polaznog adresnog prostora
	 * 
	 * BITNO:
	 * nakon vracanja iz fork poziva ne postoji garancija koji proces
	 * prvi dobija procesor. Nikada se ne oslanjati na tako nesto prilikom
	 * sinhronizacije procesa 
	 */
	pid_t childPid = fork();
	
	/* neophodna obrada gresaka */
	check_error(childPid != -1, "fork failed");
	
	/* u slucaju da povratna vrednost > 0 radi se o roditeljskoj grani */
	if (childPid > 0) { // parent branch
		
		/* getpid -> ID pozivajuceg procesa
		 * getppid -> ID parenta 
		 */ 
		printf("Hello from parent. My pid is %jd, child pid is %jd\n", \
				(intmax_t)getpid(), (intmax_t)childPid);
	}
	/* inace, radi se o grani deteta */
	else { // child branch
		
		/* sleep je ovde ilustracija, ali ne NIKADA ne koristi za
		 * sinhronizaciju procesa 
		 */
		//sleep(5);
		printf("Hello from child. My pid is %jd, parent pid is %jd\n", \
				(intmax_t)getpid(), (intmax_t)getppid());
	}
	
	printf("We both execute this\n");
	
	exit(EXIT_SUCCESS);
}


File: 2_hello_process.c
/*
Program demonstrira kreiranje novih procesa. Nakon kreiranja,
roditelj treba da ispise svoj PID i PID svog deteta, a dete
svoj PID i PID svog roditelja. Nakon toga, oba procesa ispisuju istu poruku.
Dodatno, dete poziva exit da bi zavrsilo izvrsavanje, dok roditelj ceka 
da dete zavrsi svoj rad.
*/

#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>
#include <fcntl.h>

#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <stdbool.h>

#include <sys/wait.h>

/* makro za proveru gresaka */
#define check_error(cond,msg)\
  do {\
    if (!(cond)) {\
      perror(msg);\
      fprintf(stderr, "File: %s\nFunction: %s\nLine: %d\n", __FILE__, __func__, __LINE__);\
      exit(EXIT_FAILURE);\
    }\
  } while (0)

int main(int argc, char** argv) {
	
	pid_t childPid = fork();
	
	check_error(childPid != -1, "fork failed");
	
	if (childPid > 0) { // parent branch
		
		printf("Hello from parent. My pid is %jd, child pid is %jd\n", \
				(intmax_t)getpid(), (intmax_t)childPid);
		
		/* neophodno je sacekati da se child zavrsi, jer se u 
		 * suprotnom seju zombi procesi koji bespotrebno zagusuju 
		 * sistem
		 * 
		 * BITNO:
		 * nakon svakog forka, neophodno je sacekati da se dete zavrsi
		 */ 		
		check_error(wait(NULL) != -1, "wait failed");
	}
	else { // child branch
		
		//sleep(5);
		printf("Hello from child. My pid is %jd, parent pid is %jd\n", \
				(intmax_t)getpid(), (intmax_t)getppid());
		exit(EXIT_SUCCESS);
	}
	
	printf("Only parent executes this\n");
	
	exit(EXIT_SUCCESS);
}


File: 3_process_and_vars.c
/*
Program demonstrira upotrebu promenljivih nakon poziva fork().
Nakon kreiranja, dete dobija kopiju adresnog prostora roditelja,
ali je ta kopija nezavisna od originala, pa upotreba iste 
promenljive u detetu nema uticaja na tu promenljivu u roditelju (i obrnuto).
*/

#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>
#include <fcntl.h>

#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <stdbool.h>

#include <sys/wait.h>

/* makro za proveru gresaka */
#define check_error(cond,msg)\
  do {\
    if (!(cond)) {\
      perror(msg);\
      fprintf(stderr, "File: %s\nFunction: %s\nLine: %d\n", __FILE__, __func__, __LINE__);\
      exit(EXIT_FAILURE);\
    }\
  } while (0)

int main(int argc, char** argv) {
		
	int var = 5;
	
	pid_t childPid = fork();
	
	check_error(childPid != -1, "fork failed");
	
	if (childPid > 0) { // parent branch
		
		printf("Hello from parent. My pid is %jd, child pid is %jd\n", \
				(intmax_t)getpid(), (intmax_t)childPid);
	}
	else { // child branch
		
		/* child dobija svoju kopiju promenljive koju moze da menja kako
		 * zeli, bez ikakvog uticaja na promenljivu u parentu
		 */ 
		//sleep(5);
		printf("Hello from child. My pid is %jd, parent pid is %jd\n", \
				(intmax_t)getpid(), (intmax_t)getppid());
		var *= 2;
		printf("Var in child: %d\n", var);		
		
		exit(EXIT_SUCCESS);
	}
	
	/* ako nas zanima status zavrsetka potrebno je da ga uhvatimo
	 * iz wait funkcije tako sto joj prosledimo adresu promenljive
	 * 
	 * BITNO:
	 * status zavrsetka nije isto sto i exit code. exit code je deo 
	 * statusa zavrsetka
	 */ 
	int status;
	check_error(wait(&status) != -1, "wait failed");
	
	/* ako nam treba exit code, prvo treba da proverimo da li se program
	 * ispravno zavrsio 
	 */ 
	if (WIFEXITED(status))
		/* ako jeste, onda citamo status zavrsetka */
		printf("Process exited normally. Exit code: %d\n", WEXITSTATUS(status));
	else 
		printf("Process exited abnormally\n");
	
	printf("Only parent executes this\n");
	printf("Var in parent: %d\n", var);
	
	
	exit(EXIT_SUCCESS);
}


File: 4_simple_pipe.c
/*
Program implementira nacin za komunikaciju izmedju roditelja i deteta.
Roditelj ucitava liniju sa standardnog ulaza, koju zatim
prosledjuje detetu putem pajpa.
Dete cita tu liniju i ispisuje je na standardni izlaz.
*/

#define _XOPEN_SOURCE 700
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>
#include <fcntl.h>

#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <stdbool.h>

#include <sys/wait.h>
#include <string.h>

/* makro za proveru gresaka */
#define check_error(cond,msg)\
  do {\
    if (!(cond)) {\
      perror(msg);\
      fprintf(stderr, "File: %s\nFunction: %s\nLine: %d\n", __FILE__, __func__, __LINE__);\
      exit(EXIT_FAILURE);\
    }\
  } while (0)
	
/* definicija strana pajpa i velicine bafera */
#define READ_END 	(0)
#define WRITE_END 	(1)
#define BUF_SIZE 	(256)	

int main(int argc, char** argv) {
	
	int pipeFds[2];
	
	/* BITNO:
	 * pajp se koristi kao mehanizam JEDNOSMERNE komunikacije
	 * izmedju detata i roditelja
	 * 
	 * za DVOSMERNU komunikaciju su potrebna DVA pajpa
	 */ 
	check_error(pipe(pipeFds) != -1, "pipe failed");
	
	/* nakon forka i child i parent imaju kopije i jedne i druge strane pajpa
	 * pa je svaki od njih duzan da zatvori onu stranu koja mu ne treba.
	 */
	pid_t childPid = fork();
	
	check_error(childPid != -1, "fork failed");
	
	if (childPid > 0) { // parent branch
		
		/* parent zatvara granu koja mu ne treba */
		close(pipeFds[READ_END]);
		
		char* line = NULL;
		size_t size = 0;
		
		/* ucitava se linija */
		check_error(getline(&line, &size, stdin) != -1, "getline failed");
		/* provera velicine */
		check_error(strlen(line) < BUF_SIZE, "message is too long");
		/* linija se salje childu */
		check_error(write(pipeFds[WRITE_END], line, strlen(line)) != -1, "write failed");
		
		/* zatvara se koriscena grana */
		close(pipeFds[WRITE_END]);
		free(line);
	}
	else { // child branch
		
		/* child zatvara granu koja mu ne treba */
		close(pipeFds[WRITE_END]);
		
		char line[BUF_SIZE];
		int readBytes = 0;
		
		/* cita se linija od parenta */
		check_error((readBytes = read(pipeFds[READ_END], line, BUF_SIZE)) != -1, "read failed");
		/* BITNO:
		 * linija se terminira nulom, jer read i write rade sa bajtovima
		 */ 
		line[readBytes] = '\0';
		
		/* linija se stampa na stdout */
		printf("Line received: %s\n", line);
		//write(STDOUT_FILENO, line, readbytes);
		
		/* child zatvara granu koju je koristio */
		close(pipeFds[READ_END]);
		
		exit(EXIT_SUCCESS);
	}
	
	/* BITNO:
	 * neophodno je sacekati childa da se ne bi sejali zombiji po
	 * sistemu 
	 */ 
	check_error(wait(NULL) != -1, "wait failed");
	
	exit(EXIT_SUCCESS);
}


File: 5_hello_exec.c
/* exec je sistemski poziv koji omogucava izvrsavanje drugih programa. 
Fork vrsi kopiranje adresnog prostora, exec vrsi zamenu adresnog prostora.
Nakon exec-a sadrzaj adresnog prostora se prepisuje novim procesom.

U ovom primeru, cilj je pokrenuti komandu "ls" sa argumentom "-l".
*/ 
#define _XOPEN_SOURCE 700
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>
#include <fcntl.h>

#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <stdbool.h>

#include <sys/wait.h>
#include <string.h>

/* makro za proveru gresaka */
#define check_error(cond,msg)\
  do {\
    if (!(cond)) {\
      perror(msg);\
      fprintf(stderr, "File: %s\nFunction: %s\nLine: %d\n", __FILE__, __func__, __LINE__);\
      exit(EXIT_FAILURE);\
    }\
  } while (0)

int main(int argc, char** argv) {
	
  /* Procitati u TLPI deo 27.2 (The exec() library functions)*/
	check_error(execlp("ls", "ls", "-l", NULL) != -1, "exec failed");
	
  printf("Ovaj deo koda se ne izvrsava\n");

	exit(EXIT_SUCCESS);
}


